var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import './Overview.scss';
import { PropDesc } from './PropDesc';
export function Overview() {
    var htmlString = "'<div>Insert HTML</div>'";
    return (_jsxs("div", __assign({ className: "overview" }, { children: [_jsx("p", __assign({ className: "App-intro" }, { children: "A simple fullscreen modal component for React.JS" })), _jsxs("section", __assign({ className: "ov-wrapper" }, { children: [_jsx("h2", { children: "Installation" }), _jsxs("p", { children: ["To install the latest version, you can use", ' ', _jsx("a", __assign({ href: "https://npmjs.org/" }, { children: "npm" })), " or", ' ', _jsx("a", __assign({ href: "https://yarnpkg.com/" }, { children: "yarn" })), "."] }), _jsxs("div", __assign({ className: "codeblock" }, { children: [_jsx("code", { children: "$ npm install julie-v-react-modal" }), _jsx("code", { children: "$ yarn add julie-v-react-modal" })] }))] })), _jsxs("section", __assign({ className: "ov-wrapper" }, { children: [_jsx("h2", { children: "General Usage" }), _jsxs("p", { children: ["To use the modal, you will need to import the custom hook", ' ', _jsx("code", __assign({ className: "sp-code" }, { children: "useModal()" })), " along with the modal component itself. The only required props are", ' ', _jsx("code", __assign({ className: "sp-code" }, { children: "isOpen" })), " and", ' ', _jsx("code", __assign({ className: "sp-code" }, { children: "closeModal" })), ", which indicates whether the modal should be displayed, and a function to close the modal.", _jsx("br", {}), "The following is an example of using the modal specifying all the possible props:"] }), _jsx("div", __assign({ className: "codeblock ".concat('codeblock-2') }, { children: _jsxs("code", { children: [_jsxs("p", { children: [_jsx("span", __assign({ className: "sp-i" }, { children: "import" })), " {", ' ', _jsx("span", __assign({ className: "sp-b" }, { children: "Modal, useModal" })), " }", ' ', _jsx("span", __assign({ className: "sp-i" }, { children: "from " })), _jsx("span", __assign({ className: "sp-g" }, { children: "'julie-v-react-modal'" }))] }), _jsx("p", { children: "function App() {" }), _jsx("p", __assign({ className: "ind-1" }, { children: "const { isOpen, openModal, closeModal } = useModal()" })), _jsx("p", __assign({ className: "ind-1" }, { children: "const onAfterCloseFunction = () => { console.log('Modal closed') }" })), _jsx("p", __assign({ className: "ind-1" }, { children: "return (" })), _jsx("p", __assign({ className: "ind-2" }, { children: "<button onClick={() => openModal()}>" })), _jsx("p", __assign({ className: "ind-2" }, { children: "<Modal" })), _jsx(PropDesc, { name: "isOpen", value: "isOpen", description: "/* State variable (boolean) stored in the useModal hook, describing if the modal should be shown or not.*/" }), _jsx(PropDesc, { name: "closeModal", value: "closeModal", description: "/* Function to close the modal from the useModal hook*/" }), _jsx(PropDesc, { name: "modalVisible", value: "'visible'", description: "/* String (default: 'visible') className of the modal when it is visible (controls opacity and visibility)*/" }), _jsx(PropDesc, { name: "showClose", value: "true", description: "/* Boolean (default: true) indicating if the close button is displayed*/" }), _jsx(PropDesc, { name: "closeText", value: "'Close'", description: "/* String (default: 'Close') containing the text displayed in the close button */" }), _jsx(PropDesc, { name: "escToClose", value: "true", description: "/* Boolean (default: true) indicating if the modal can be closed by pressing the escape key*/" }), _jsx(PropDesc, { name: "clickOverlayClose", value: "true", description: "/* Boolean (default: true) indicating if the modal can be closed by clicking on the overlay*/" }), _jsx(PropDesc, { name: "onAfterClose", value: "onAfterCloseFunction", description: "/* Function (default: null) to be executed after the modal has been closed*/" }), _jsx(PropDesc, { name: "afterCloseEventDelay", value: "500", description: "/* Number (default: 0) indicating the delay in ms before the onAfterClose function is executed*/" }), _jsx(PropDesc, { name: "modalClass", value: "'modalClassName'", description: "/*String (default: undefined) additional className for the modal div*/" }), _jsx(PropDesc, { name: "overlayClass", value: "'overlayClassName'", description: "/*String (default: undefined) additional className for the modal overlay div*/" }), _jsx(PropDesc, { name: "modalTitle", value: "'Modal Title'", description: "/* String (default: undefined) containing the title of the modal*/" }), _jsx(PropDesc, { name: "textContent", value: "'Example text content'", description: "/* String (default: undefined) containing the text to be displayted inside the modal content div*/" }), _jsx(PropDesc, { name: "htmlContent", value: htmlString, description: "/* String (default: null) containing some HTML content to be displayed in the modal content div*/" }), _jsx(PropDesc, { name: "ChildComponent", value: "<ChildComponent props={'componentProps'} />", description: "/* React Component (default: null) to be displayed inside the modal content div*/" }), _jsx(PropDesc, { name: "animationClass", value: "'fade'", description: "/* String (default: 'fade') className to be applied to the modal when it is opened or closed*/" }), _jsx(PropDesc, { name: "animationDuration", value: "'0.3s'", description: "/* String (default: '0.3s') duration of the open/close animation*/" }), _jsx(PropDesc, { name: "showSpinner", value: "true", description: "/* Boolean (default: false) indicating if a spinner should be displayed while the modal is opening*/" }), _jsx(PropDesc, { name: "customSpinner", value: "'<div>Loading...</div>'", description: "/* String (default: undefined) containing some HTML content to be displayed as a custom spinner*/" }), _jsx(PropDesc, { name: "spinnerDuration", value: "2000", description: "/* Number (default: 1000) in ms indicating the duration during which the spinner is displayed before the modal content appears*/" }), _jsx("p", __assign({ className: "ind-2" }, { children: "/>" })), _jsx("p", __assign({ className: "ind-1" }, { children: ")" })), "}"] }) }))] }))] })));
}
