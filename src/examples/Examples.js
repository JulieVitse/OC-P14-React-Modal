var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import './Examples.scss';
import { MultipleModals } from './multiple_modals/MultipleModals';
import { AllPropsModal } from './all_props_modal/AllPropsModal';
import { SimpleUsage } from './simple_usage/SimpleUsage';
export function Examples() {
    return (_jsxs("section", __assign({ className: "examples" }, { children: [_jsx("h2", __assign({ className: "examples__title" }, { children: "Here are a few examples of modal usage" })), _jsxs("div", __assign({ className: "example-wrapper" }, { children: [_jsx("p", __assign({ className: "example-wrapper__title" }, { children: "Basic modal with only required & default props" })), _jsxs("div", __assign({ className: "example" }, { children: [_jsx("div", __assign({ className: "codeblock ".concat('codeblock-2') }, { children: _jsxs("code", { children: [_jsx("p", { children: "<Modal" }), _jsx("p", __assign({ className: "ind-1" }, { children: "isOpen= {isOpen}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "closeModal= {closeModal}" })), ">", _jsx("p", __assign({ className: "ind-1" }, { children: "<p>Simple modal content</p>" })), _jsx("p", { children: "</Modal>" })] }) })), _jsx(SimpleUsage, {})] }))] })), _jsxs("div", __assign({ className: "example-wrapper" }, { children: [_jsx("p", __assign({ className: "example-wrapper__title" }, { children: "Usage of multiple modals" })), _jsxs("div", __assign({ className: "example" }, { children: [_jsx("div", __assign({ className: "codeblock ".concat('codeblock-2') }, { children: _jsxs("code", { children: [_jsx("p", { children: "function App() {" }), _jsx("p", __assign({ className: "ind-1" }, { children: "const { isOpen: isOpenConfirm, openModal: openModalConfirm, closeModal: closeModalConfirm } = useModal()" })), _jsx("p", __assign({ className: "ind-1" }, { children: "const { isOpen: isOpenForm, openModal: openModalForm, closeModal: closeModalForm } = useModal()" })), _jsx("br", {}), _jsx("p", __assign({ className: "ind-1" }, { children: "return (" })), _jsx("p", __assign({ className: "ind-2" }, { children: "<button onClick={() => openModalConfirm()}>" })), _jsx("p", __assign({ className: "ind-2" }, { children: "<button onClick={() => openModalForm()}>" })), _jsx("br", {}), _jsx("p", __assign({ className: "ind-2" }, { children: "<Modal" })), _jsx("p", __assign({ className: "ind-3" }, { children: "isOpen= {isOpenConfirm}" })), _jsx("p", __assign({ className: "ind-3" }, { children: "closeModal= {closeModalConfirm}" })), _jsx("p", __assign({ className: "ind-3" }, { children: "textContent=\"I am a confirm modal\"" })), _jsx("p", __assign({ className: "ind-2" }, { children: "/>" })), _jsx("p", __assign({ className: "ind-2" }, { children: "<Modal" })), _jsx("p", __assign({ className: "ind-3" }, { children: "isOpen= {isOpenForm}" })), _jsx("p", __assign({ className: "ind-3" }, { children: "closeModal= {closeModalForm}" })), _jsx("p", __assign({ className: "ind-3" }, { children: "ChildComponent={<Form name={\"Form component\"} />}" })), _jsx("p", __assign({ className: "ind-2" }, { children: "/>" })), _jsx("p", __assign({ className: "ind-1" }, { children: ")" })), _jsx("p", { children: "}" })] }) })), _jsx(MultipleModals, {})] }))] })), _jsxs("div", __assign({ className: "example-wrapper" }, { children: [_jsx("p", __assign({ className: "example-wrapper__title" }, { children: "Modal with most of the available props" })), _jsxs("div", __assign({ className: "example" }, { children: [_jsx("div", __assign({ className: "codeblock ".concat('codeblock-2') }, { children: _jsxs("code", { children: [_jsx("p", { children: "const onAfterCloseFunction = () => { alert('Modal has been closed') }" }), _jsxs("p", __assign({ className: "comment" }, { children: [' ', "// Note that the above function should be placed before the return in your parent component"] })), _jsx("p", { children: "<Modal" }), _jsx("p", __assign({ className: "ind-1" }, { children: "isOpen={isOpen}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "closeModal={closeModal}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "modalVisible=\"visible\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "escToClose={false}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "clickOverlayClose={false}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "showClose={true}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "closeText=\"Exit\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "modalTitle=\"Example title\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "textContent=\"Example text content\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "htmlContent=\"<img src=\"https://picsum.photos/200/300\" />\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "animationClass=\"fade\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "animationDuration=\".5s\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "onAfterClose={onAfterCloseFunction}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "afterCloseEventDelay={500}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "showSpinner={true}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "spinnerDuration={2000}" })), _jsx("p", __assign({ className: "ind-1" }, { children: "overlayClass=\"customOverlay\"" })), _jsx("p", __assign({ className: "ind-1" }, { children: "modalClass=\"customModal\"" })), _jsx("p", { children: "/>" })] }) })), _jsx(AllPropsModal, {})] }))] }))] })));
}
